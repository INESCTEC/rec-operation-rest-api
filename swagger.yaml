openapi: 3.1.0
info:
  title: Enershare - REC Operation and LEM pricing API
  description: A REST API designed to calculate the prices in a Local Energy Market (LEM) and to determine the operational schedule of Battery Energy Storage System (BESS) assets within a Renewable Energy Community (REC). The API uses data from two datasets within the ENERSHARE project, Smart Energy Lab (SEL) and IN-DATA, namely real historical net load measurements of several households that have agreed to share their data. Nonetheless, the  user can specify additional PV capacity to each household, additional storage capacity and even additional "shared" meters with their own PV and storage capacities, for simulation scenarios. Sensitive data, such as the households geographical location and contracts with energy retailers, required for using this tool, was fabricated and can be altered at will in the code of the API itself.
  version: 0.2.1
paths:
  /vanilla/{pricing_mechanism}:
    post:
      tags:
        - Calculate LEM Prices
      summary: Vanilla
      description: Calculate an array of LEM prices using the selected pricing mechanism. <br />No Mixed Integer Linear Programming (MILP) is solved. The LEM offers are formulated solely on the basis of the metersâ€™ historical or projected net consumption and their corresponding opportunity costs. Nonetheless, additional PV capacities per meter ID can be defined, for simulation purposes.
      operationId: vanilla_vanilla__pricing_mechanism__post
      parameters:
        - name: pricing_mechanism
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/PricingMechanism'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VanillaUserParams'
      responses:
        '202':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /vanilla/{order_id}:
    get:
      tags:
        - Retrieve LEM Prices
      summary: Vanilla
      description: An endpoint for fetching the results of a "vanilla" request, given the order ID.
      operationId: vanilla_vanilla__order_id__get
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: string
            title: Order Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VanillaOutputs'
        '202':
          description: Order found but not yet processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderNotProcessed'
        '404':
          description: Order not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderNotFound'
        '412':
          description: One or more meter IDs not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeterIDNotFound'
        '422':
          description: One or more data points for one or more meter IDs not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeseriesDataNotFound'
  /dual:
    post:
      tags:
        - Schedule operation and calculate LEM Prices
      summary: Dual
      description: Calculate an array of LEM prices and the operational schedule of the BESS assets by executing a purely collective MILP. <br />In this process, the shadow prices of a LEM equilibrium constraint are returned as the optimal LEM prices. <br />Additional PV and storage capacities, as well as additional "shared" meters can be defined for simulation purposes.
      operationId: dual_dual_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DualUserParams'
        required: true
      responses:
        '202':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /loop/{lem_organization}/{pricing_mechanism}:
    post:
      tags:
        - Schedule operation and calculate LEM Prices
      summary: Loop
      description: Calculate an array of LEM prices and the operational schedule of the BESS assets by implementing an iterative algorithm. <br />In this process, successive two-stage MILP are solved until a specified stopping criterion is achieved. Each two-stage MILP procedure is executed with LEM prices that are calculated based on the user-defined pricing mechanism. The offers are formulated based on the net loads that result from the previously solved MILP. <br />Additional PV and storage capacities, as well as additional "shared" meters can be defined for simulation purposes.
      operationId: loop_loop__lem_organization___pricing_mechanism__post
      parameters:
        - name: pricing_mechanism
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/PricingMechanism'
        - name: lem_organization
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/LemOrganization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoopUserParams'
      responses:
        '202':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /dual/{order_id}:
    get:
      tags:
        - Retrieve operation and LEM prices
      summary: Dual
      description: An endpoint for fetching the results of a request that involves solving one or several MILP, given the order ID.
      operationId: dual_dual__order_id__get
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: string
            title: Order Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolMILPOutputs'
        '202':
          description: Order found but not yet processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderNotProcessed'
        '404':
          description: Order not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderNotFound'
        '412':
          description: One or more meter IDs not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeterIDNotFound'
        '422':
          description: One or more data point for one or more meter IDs not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeseriesDataNotFound'
  /loop/pool/{order_id}:
    get:
      tags:
        - Retrieve operation and LEM prices
      summary: Loop Pool
      description: An endpoint for fetching the results of a request that involves solving one or several MILP, given the order ID.
      operationId: loop_pool_loop_pool__order_id__get
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: string
            title: Order Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolMILPOutputs'
        '202':
          description: Order found but not yet processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderNotProcessed'
        '404':
          description: Order not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderNotFound'
        '412':
          description: One or more meter IDs not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeterIDNotFound'
        '422':
          description: One or more data point for one or more meter IDs not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeseriesDataNotFound'
  /loop/bilateral/{order_id}:
    get:
      tags:
        - Retrieve operation and LEM prices
      summary: Loop Bilateral
      description: An endpoint for fetching the results of a request that involves solving one or several MILP, given the order ID.
      operationId: loop_bilateral_loop_bilateral__order_id__get
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: string
            title: Order Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BilateralMILPOutputs'
        '202':
          description: Order found but not yet processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderNotProcessed'
        '404':
          description: Order not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderNotFound'
        '412':
          description: One or more meter IDs not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeterIDNotFound'
        '422':
          description: One or more data point for one or more meter IDs not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeseriesDataNotFound'
components:
  schemas:
    AcceptedResponse:
      properties:
        message:
          type: string
          title: Message
          examples:
            - Processing has started. Use the order ID for status updates.
        order_id:
          type: string
          title: Order Id
          description: Order identifier for the request. <br />Request results via REST API can only be retrieved by specifying this identifier.
          examples:
            - iaMiULXA9BktPUu2b_PwTtycCSNe0_wYpPt9muwlEtgL49GDg-kggSktAjtu
      type: object
      required:
        - message
        - order_id
      title: AcceptedResponse
    BilateralLEMTransactions:
      properties:
        provider_meter_id:
          type: string
          title: Provider Meter Id
          description: A string that unequivocally identifies the providing meter of the REC.
          examples:
            - Meter#1
        receiver_meter_id:
          type: string
          title: Receiver Meter Id
          description: A string that unequivocally identifies the receiving meter of the REC.
          examples:
            - Meter#2
        datetime:
          type: string
          format: date-time
          title: Datetime
          description: Datetime in ISO 8601 format.
          examples:
            - '2024-05-16T00:45:00Z'
        energy:
          type: number
          title: Energy
          description: Energy transacted in the local energy market (LEM), in kWh.
          examples:
            - 5
      type: object
      required:
        - provider_meter_id
        - receiver_meter_id
        - datetime
        - energy
      title: BilateralLEMTransactions
    BilateralMILPOutputs:
      properties:
        order_id:
          type: string
          maxLength: 60
          minLength: 60
          title: Order Id
          description: Order identifier for the request.
          examples:
            - iaMiULXA9BktPUu2b_PwTtycCSNe0_wYpPt9muwlEtgL49GDg-kggSktAjtu
        objective_value:
          type: number
          title: Objective Value
          description: Objective value found for the MILP solution.
          examples:
            - 5
        milp_status:
          $ref: '#/components/schemas/MILPStatus'
          description: Indicates if the MILP was optimally solved (by returning "Optimal") or if an issue was raised and a successful solution was not achieved (by returning "Infeasible" or "Unbounded").
        total_rec_cost:
          type: number
          title: Total Rec Cost
          description: Total operation cost for the whole community, in â‚¬.
          examples:
            - 5
        individual_costs:
          items:
            $ref: '#/components/schemas/IndividualCosts'
          type: array
          title: Individual Costs
          description: Individual operation cost per meter ID, in â‚¬.
        meter_inputs:
          items:
            $ref: '#/components/schemas/InputsPerMeterAndDatetime'
          type: array
          title: Meter Inputs
          description: All time-varying inputs that were fed into the MILP, per meter ID.
        meter_outputs:
          items:
            $ref: '#/components/schemas/OutputsPerMeterAndDatetime'
          type: array
          title: Meter Outputs
          description: Time-varying outputs calculated in the MILP, per meter ID.
        lem_transactions:
          items:
            $ref: '#/components/schemas/BilateralLEMTransactions'
          type: array
          title: Lem Transactions
          description: List with energies bought and sold in the LEM, per pair of meter IDs and per datetime.
        lem_prices:
          items:
            $ref: '#/components/schemas/LemPrice'
          type: array
          title: Lem Prices
          description: List with the local energy market prices computed for the requested horizon.
        self_consumption_tariffs:
          items:
            $ref: '#/components/schemas/BilateralSelfConsumptionTariffsPerDatetime'
          type: array
          title: Self Consumption Tariffs
          description: List with the self-consumption tariffs considered by the MILP, per pair of meter IDs.
      type: object
      required:
        - order_id
        - objective_value
        - milp_status
        - total_rec_cost
        - individual_costs
        - meter_inputs
        - meter_outputs
        - lem_transactions
        - lem_prices
        - self_consumption_tariffs
      title: BilateralMILPOutputs
    BilateralSelfConsumptionTariffsPerDatetime:
      properties:
        datetime:
          type: string
          format: date-time
          title: Datetime
          description: Datetime in ISO 8601 format.
          examples:
            - '2024-05-16T00:45:00Z'
        provider_meter_id:
          type: string
          title: Provider Meter Id
          description: A string that unequivocally identifies the providing meter of the REC.
          examples:
            - Meter#1
        receiver_meter_id:
          type: string
          title: Receiver Meter Id
          description: A string that unequivocally identifies the receiving meter of the REC.
          examples:
            - Meter#2
        self_consumption_tariff:
          type: number
          title: Self Consumption Tariff
          description: Tariff applicable to self-consumed energy from the public grid, published by the national regulatory entity for energy services, in â‚¬/kWh. This tariff is payable by the receiving_member_id when purchasing energy in the LEM from the provider_member_id.
          examples:
            - 5
      type: object
      required:
        - datetime
        - provider_meter_id
        - receiver_meter_id
        - self_consumption_tariff
      title: BilateralSelfConsumptionTariffsPerDatetime
    ContractedPower:
      properties:
        meter_id:
          type: string
          title: Meter Id
          description: The string that unequivocally identifies the meter.
        contracted_power:
          type: number
          minimum: 0
          title: Contracted Power
          description: Contracted power at the meter, in kVA.
      type: object
      required:
        - meter_id
        - contracted_power
      title: ContractedPower
    DatasetOrigin:
      type: string
      enum:
        - INDATA
        - SEL
      title: DatasetOrigin
    DualUserParams:
      properties:
        start_datetime:
          type: string
          format: date-time
          title: Start Datetime
          description: Start datetime for the price calculation horizon (included in it) in ISO 8601 format.
          examples:
            - '2024-05-16T00:00:00Z'
        end_datetime:
          type: string
          format: date-time
          title: End Datetime
          description: End datetime for the price calculation horizon (included in it) in ISO 8601 format.
          examples:
            - '2024-05-16T00:45:00Z'
        dataset_origin:
          $ref: '#/components/schemas/DatasetOrigin'
          description: |-
            Dataset origin from which the meter IDs' data is to be retrieved from. Two options are provided:
             - SEL (Smart Energy Lab)
             - INDATA
          examples:
            - SEL
        meter_ids:
          items:
            type: string
          type: array
          uniqueItems: true
          title: Meter Ids
          description: An array of strings that unequivocally identifies the meters to be included in the REC. <br />All registered assets (i.e., meter ids) belonging totally or partially to the meters listed, will be considered in the following computations.
          examples:
            - - Meter#1
              - Meter#2
        meter_installed_pv_capacities:
          anyOf:
            - items:
                $ref: '#/components/schemas/InstalledPVCapacity'
              type: array
            - type: 'null'
          title: Meter Installed Pv Capacities
          description: Defines, for the list of meters provided, what are the installed PV capacities to be considered.  <br />If this field or any specific structure regarding a meter ID defined in the "meter_ids" field is not provided, the original PV capacities of the missing meters will be considered.
          default: []
          examples:
            - - installed_pv_capacity: 5
                meter_id: Meter#1
        shared_meter_ids:
          anyOf:
            - items:
                type: string
              type: array
              uniqueItems: true
            - type: 'null'
          title: Shared Meter Ids
          description: An array of strings that unequivocally identifies the new shared meters to be included in the REC.
          default: []
          examples:
            - - SharedMeter#1
              - SharedMeter#2
        shared_meter_installed_pv_capacities:
          anyOf:
            - items:
                $ref: '#/components/schemas/InstalledPVCapacity'
              type: array
            - type: 'null'
          title: Shared Meter Installed Pv Capacities
          description: Defines, for the list of shared meters provided, what are the installed PV capacities to be considered.  <br />If this field or any specific structure regarding a shared meter ID defined in the "shared_meter_ids" field is not provided, no PV capacity will be considered for the missing meters.
          default: []
          examples:
            - - installed_pv_capacity: 5
                meter_id: SharedMeter#1
        meter_storage:
          anyOf:
            - items:
                $ref: '#/components/schemas/Storage'
              type: array
            - type: 'null'
          title: Meter Storage
          description: Defines, for the list of meters provided, what are the installed PV capacities to be considered.  <br />If this field or any specific structure regarding a meter ID defined in the "meter_ids" field is not provided, no storage capacities for the missing meters will be considered.
          default: []
          examples:
            - - deg_cost: 0.01
                e_bn: 5
                eff_bc: 100
                eff_bd: 100
                meter_id: Meter#1
                p_max: 5
                soc_max: 100
                soc_min: 0
        shared_meter_storage:
          anyOf:
            - items:
                $ref: '#/components/schemas/Storage'
              type: array
            - type: 'null'
          title: Shared Meter Storage
          description: Defines, for the list of shared meters provided, what are the installed PV capacities to be considered.  <br />If this field or any specific structure regarding a meter ID defined in the "shared_meter_ids" field is not provided, no storage capacities for the missing meters will be considered.
          default: []
          examples:
            - - deg_cost: 0.01
                e_bn: 5
                eff_bc: 100
                eff_bd: 100
                meter_id: SharedMeter#1
                p_max: 5
                soc_max: 100
                soc_min: 0
        meter_contracted_power:
          anyOf:
            - items:
                $ref: '#/components/schemas/ContractedPower'
              type: array
            - type: 'null'
          title: Meter Contracted Power
          description: 'Defines, for the list of meters provided, what are the installed PV capacities to be considered.  <br />If this field or any specific structure regarding a meter ID defined in the "meter_ids" field is not provided, a default value equal to the maximum possible contracted power in BTN (low voltage) will be considered: 41.4 kVA.'
          default: []
          examples:
            - - contracted_power: 6.9
                meter_id: Meter#1
        shared_meter_contracted_power:
          anyOf:
            - items:
                $ref: '#/components/schemas/ContractedPower'
              type: array
            - type: 'null'
          title: Shared Meter Contracted Power
          description: 'Defines, for the list of shared meters provided, what are the installed PV capacities to be considered.  <br />If this field or any specific structure regarding a meter ID defined in the "shared_meter_ids" field is not provided, a default value equal to the maximum possible contracted power in BTN (low voltage) will be considered: 41.4 kVA.'
          default: []
          examples:
            - - contracted_power: 6.9
                meter_id: SharedMeter#1
      type: object
      required:
        - start_datetime
        - end_datetime
        - dataset_origin
        - meter_ids
      title: DualUserParams
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    IndividualCosts:
      properties:
        meter_id:
          type: string
          title: Meter Id
          description: A string that unequivocally identifies a meter of the REC.
          examples:
            - Meter#1
        individual_cost:
          type: number
          title: Individual Cost
          description: The operation cost for the optimization horizon calculated for the meter ID, without considering the cost for degradation of the BESS, in â‚¬.
          examples:
            - 5
      type: object
      required:
        - meter_id
        - individual_cost
      title: IndividualCosts
    InputsPerMeterAndDatetime:
      properties:
        meter_id:
          type: string
          title: Meter Id
          description: A string that unequivocally identifies a meter of the REC.
          examples:
            - Meter#1
        datetime:
          type: string
          format: date-time
          title: Datetime
          description: Datetime in ISO 8601 format.
          examples:
            - '2024-05-16T00:45:00Z'
        energy_generated:
          type: number
          title: Energy Generated
          description: PV panelsâ€™ generation considered by the algorithm, in kWh.
          examples:
            - 5
        energy_consumed:
          type: number
          title: Energy Consumed
          description: Meter's consumption considered by the algorithm, in kWh.
          examples:
            - 5
        buy_tariff:
          type: number
          title: Buy Tariff
          description: Purchase rate agreed with the retailer that was considered by the algorithm, in â‚¬/kWh.
          examples:
            - 5
        sell_tariff:
          type: number
          title: Sell Tariff
          description: Selling rate agreed with the retailer that was considered by the algorithm, in â‚¬/kWh.
          examples:
            - 5
      type: object
      required:
        - meter_id
        - datetime
        - energy_generated
        - energy_consumed
        - buy_tariff
        - sell_tariff
      title: InputsPerMeterAndDatetime
    InstalledPVCapacity:
      properties:
        meter_id:
          type: string
          title: Meter Id
          description: The string that unequivocally identifies the meter.
        installed_pv_capacity:
          type: number
          minimum: 0
          title: Installed Pv Capacity
          description: Installed PV capacity that will overrule the original PV capacity of the meter, in kVA.
      type: object
      required:
        - meter_id
        - installed_pv_capacity
      title: InstalledPVCapacity
    LemOrganization:
      type: string
      enum:
        - pool
        - bilateral
      title: LemOrganization
    LemPrice:
      properties:
        datetime:
          type: string
          format: date-time
          title: Datetime
          description: Datetime in ISO 8601 format.
          examples:
            - '2024-05-16T00:45:00Z'
        value:
          type: number
          minimum: 0
          title: Value
          description: Local energy market price computed, in â‚¬/kWh.
      type: object
      required:
        - datetime
        - value
      title: LemPrice
    LoopUserParams:
      properties:
        sdr_compensation:
          anyOf:
            - type: number
              maximum: 1
              minimum: 0
            - type: 'null'
          title: Sdr Compensation
          description: Only considered when choosing "sdr" as the pricing mechanism. <br />Defines a compensation between 0.0 and 1.0 allowing the user to set an incentive for internal trades whenever the REC has a net surplus.
          default: 0
        mmr_divisor:
          anyOf:
            - type: integer
              exclusiveMinimum: 0
            - type: 'null'
          title: Mmr Divisor
          description: Only considered when choosing "mmr" as the pricing mechanism. <br />Defines the divisor considered on the MMR expression. Values greater than 2 will favor buyers and values smaller than 2 will favor sellers.
          default: 2
        start_datetime:
          type: string
          format: date-time
          title: Start Datetime
          description: Start datetime for the price calculation horizon (included in it) in ISO 8601 format.
          examples:
            - '2024-05-16T00:00:00Z'
        end_datetime:
          type: string
          format: date-time
          title: End Datetime
          description: End datetime for the price calculation horizon (included in it) in ISO 8601 format.
          examples:
            - '2024-05-16T00:45:00Z'
        dataset_origin:
          $ref: '#/components/schemas/DatasetOrigin'
          description: |-
            Dataset origin from which the meter IDs' data is to be retrieved from. Two options are provided:
             - SEL (Smart Energy Lab)
             - INDATA
          examples:
            - SEL
        meter_ids:
          items:
            type: string
          type: array
          uniqueItems: true
          title: Meter Ids
          description: An array of strings that unequivocally identifies the meters to be included in the REC. <br />All registered assets (i.e., meter ids) belonging totally or partially to the meters listed, will be considered in the following computations.
          examples:
            - - Meter#1
              - Meter#2
        meter_installed_pv_capacities:
          anyOf:
            - items:
                $ref: '#/components/schemas/InstalledPVCapacity'
              type: array
            - type: 'null'
          title: Meter Installed Pv Capacities
          description: Defines, for the list of meters provided, what are the installed PV capacities to be considered.  <br />If this field or any specific structure regarding a meter ID defined in the "meter_ids" field is not provided, the original PV capacities of the missing meters will be considered.
          default: []
          examples:
            - - installed_pv_capacity: 5
                meter_id: Meter#1
        shared_meter_ids:
          anyOf:
            - items:
                type: string
              type: array
              uniqueItems: true
            - type: 'null'
          title: Shared Meter Ids
          description: An array of strings that unequivocally identifies the new shared meters to be included in the REC.
          default: []
          examples:
            - - SharedMeter#1
              - SharedMeter#2
        shared_meter_installed_pv_capacities:
          anyOf:
            - items:
                $ref: '#/components/schemas/InstalledPVCapacity'
              type: array
            - type: 'null'
          title: Shared Meter Installed Pv Capacities
          description: Defines, for the list of shared meters provided, what are the installed PV capacities to be considered.  <br />If this field or any specific structure regarding a shared meter ID defined in the "shared_meter_ids" field is not provided, no PV capacity will be considered for the missing meters.
          default: []
          examples:
            - - installed_pv_capacity: 5
                meter_id: SharedMeter#1
        meter_storage:
          anyOf:
            - items:
                $ref: '#/components/schemas/Storage'
              type: array
            - type: 'null'
          title: Meter Storage
          description: Defines, for the list of meters provided, what are the installed PV capacities to be considered.  <br />If this field or any specific structure regarding a meter ID defined in the "meter_ids" field is not provided, no storage capacities for the missing meters will be considered.
          default: []
          examples:
            - - deg_cost: 0.01
                e_bn: 5
                eff_bc: 100
                eff_bd: 100
                meter_id: Meter#1
                p_max: 5
                soc_max: 100
                soc_min: 0
        shared_meter_storage:
          anyOf:
            - items:
                $ref: '#/components/schemas/Storage'
              type: array
            - type: 'null'
          title: Shared Meter Storage
          description: Defines, for the list of shared meters provided, what are the installed PV capacities to be considered.  <br />If this field or any specific structure regarding a meter ID defined in the "shared_meter_ids" field is not provided, no storage capacities for the missing meters will be considered.
          default: []
          examples:
            - - deg_cost: 0.01
                e_bn: 5
                eff_bc: 100
                eff_bd: 100
                meter_id: SharedMeter#1
                p_max: 5
                soc_max: 100
                soc_min: 0
        meter_contracted_power:
          anyOf:
            - items:
                $ref: '#/components/schemas/ContractedPower'
              type: array
            - type: 'null'
          title: Meter Contracted Power
          description: 'Defines, for the list of meters provided, what are the installed PV capacities to be considered.  <br />If this field or any specific structure regarding a meter ID defined in the "meter_ids" field is not provided, a default value equal to the maximum possible contracted power in BTN (low voltage) will be considered: 41.4 kVA.'
          default: []
          examples:
            - - contracted_power: 6.9
                meter_id: Meter#1
        shared_meter_contracted_power:
          anyOf:
            - items:
                $ref: '#/components/schemas/ContractedPower'
              type: array
            - type: 'null'
          title: Shared Meter Contracted Power
          description: 'Defines, for the list of shared meters provided, what are the installed PV capacities to be considered.  <br />If this field or any specific structure regarding a meter ID defined in the "shared_meter_ids" field is not provided, a default value equal to the maximum possible contracted power in BTN (low voltage) will be considered: 41.4 kVA.'
          default: []
          examples:
            - - contracted_power: 6.9
                meter_id: SharedMeter#1
      type: object
      required:
        - start_datetime
        - end_datetime
        - dataset_origin
        - meter_ids
      title: LoopUserParams
    MILPStatus:
      type: string
      enum:
        - Optimal
        - Unbounded
        - Infeasible
      title: MILPStatus
    MeterIDNotFound:
      properties:
        message:
          type: string
          title: Message
          examples:
            - One or more meter IDs not found on registry system.
        missing_ids:
          items:
            type: string
          type: array
          title: Missing Ids
          description: List with meter IDs missing from the registry system.
          examples:
            - - Meter#1
              - Meter#2
        order_id:
          type: string
          maxLength: 45
          minLength: 45
          title: Order Id
          description: Order identifier for the request.
          examples:
            - iaMiULXA9BktPUu2b_PwTtycCSNe0_wYpPt9muwlEtgL49GDg-kggSktAjtu
      type: object
      required:
        - message
        - missing_ids
        - order_id
      title: MeterIDNotFound
    Offer:
      properties:
        datetime:
          type: string
          format: date-time
          title: Datetime
          description: Datetime in ISO 8601 format.
          examples:
            - '2024-05-16T00:45:00Z'
        meter_id:
          type: string
          title: Meter Id
          description: The string that unequivocally identifies the meter of the REC that made the offer.
          examples:
            - Meter#1
        amount:
          type: number
          minimum: 0
          title: Amount
          description: Amount offered in the session, in kWh.
        value:
          type: number
          minimum: 0
          title: Value
          description: Price offered in the session, in â‚¬/kwh.
        type:
          $ref: '#/components/schemas/OfferType'
          description: Indicates if it is a buying or selling offer.
      type: object
      required:
        - datetime
        - meter_id
        - amount
        - value
        - type
      title: Offer
    OfferType:
      type: string
      enum:
        - buy
        - sell
      title: OfferType
    OrderNotFound:
      properties:
        message:
          type: string
          title: Message
          examples:
            - Order not found.
        order_id:
          type: string
          maxLength: 45
          minLength: 45
          title: Order Id
          description: Order identifier for the request.
          examples:
            - iaMiULXA9BktPUu2b_PwTtycCSNe0_wYpPt9muwlEtgL49GDg-kggSktAjtu
      type: object
      required:
        - message
        - order_id
      title: OrderNotFound
    OrderNotProcessed:
      properties:
        message:
          type: string
          title: Message
          examples:
            - Order found, but not yet processed. Please try again later.
        order_id:
          type: string
          maxLength: 45
          minLength: 45
          title: Order Id
          description: Order identifier for the request.
          examples:
            - iaMiULXA9BktPUu2b_PwTtycCSNe0_wYpPt9muwlEtgL49GDg-kggSktAjtu
      type: object
      required:
        - message
        - order_id
      title: OrderNotProcessed
    OutputsPerMeterAndDatetime:
      properties:
        meter_id:
          type: string
          title: Meter Id
          description: A string that unequivocally identifies a meter of the REC.
          examples:
            - Meter#1
        datetime:
          type: string
          format: date-time
          title: Datetime
          description: Datetime in ISO 8601 format.
          examples:
            - '2024-05-16T00:45:00Z'
        energy_surplus:
          type: number
          title: Energy Surplus
          description: Energy surplus that was sold to the retailer, in kWh.
          examples:
            - 5
        energy_supplied:
          type: number
          title: Energy Supplied
          description: Energy supplied that was bought from the retailer, in kWh.
          examples:
            - 5
        net_load:
          type: number
          title: Net Load
          description: Expected net load registered in the meter, in kWh.
          examples:
            - 5
        bess_energy_charged:
          type: number
          title: Bess Energy Charged
          description: Energy charged in the meter's BESS, in kWh. <br />Sent as 0.0 if the meter does not have storage.
          examples:
            - 5
        bess_energy_discharged:
          type: number
          title: Bess Energy Discharged
          description: Energy discharged in the meter's BESS, in kWh. <br />Sent as 0.0 if the meter does not have storage.
          examples:
            - 5
        bess_energy_content:
          type: number
          title: Bess Energy Content
          description: Energy content of the meter's BESS, at the end of the time interval, in kWh. <br />Sent as 0.0 if the meter does not have storage.
          examples:
            - 5
      type: object
      required:
        - meter_id
        - datetime
        - energy_surplus
        - energy_supplied
        - net_load
        - bess_energy_charged
        - bess_energy_discharged
        - bess_energy_content
      title: OutputsPerMeterAndDatetime
    PoolLEMTransactions:
      properties:
        meter_id:
          type: string
          title: Meter Id
          description: A string that unequivocally identifies a meter of the REC.
          examples:
            - Meter#1
        datetime:
          type: string
          format: date-time
          title: Datetime
          description: Datetime in ISO 8601 format.
          examples:
            - '2024-05-16T00:45:00Z'
        energy_purchased_lem:
          type: number
          title: Energy Purchased Lem
          description: Energy that was purchased in the local energy market (LEM), in kWh.
          examples:
            - 5
        energy_sold_lem:
          type: number
          title: Energy Sold Lem
          description: Energy that was sold in the local energy market (LEM), in kWh.
          examples:
            - 5
        sold_position:
          type: number
          title: Sold Position
          description: Sold position of the meter ID, for the datetime, calculated as the energy sold minus the energy bought in the LEM, in kWh.
          examples:
            - 0
      type: object
      required:
        - meter_id
        - datetime
        - energy_purchased_lem
        - energy_sold_lem
        - sold_position
      title: PoolLEMTransactions
    PoolMILPOutputs:
      properties:
        order_id:
          type: string
          maxLength: 60
          minLength: 60
          title: Order Id
          description: Order identifier for the request.
          examples:
            - iaMiULXA9BktPUu2b_PwTtycCSNe0_wYpPt9muwlEtgL49GDg-kggSktAjtu
        objective_value:
          type: number
          title: Objective Value
          description: Objective value found for the MILP solution.
          examples:
            - 5
        milp_status:
          $ref: '#/components/schemas/MILPStatus'
          description: Indicates if the MILP was optimally solved (by returning "Optimal") or if an issue was raised and a successful solution was not achieved (by returning "Infeasible" or "Unbounded").
        total_rec_cost:
          type: number
          title: Total Rec Cost
          description: Total operation cost for the whole community, in â‚¬.
          examples:
            - 5
        individual_costs:
          items:
            $ref: '#/components/schemas/IndividualCosts'
          type: array
          title: Individual Costs
          description: Individual operation cost per meter ID, in â‚¬.
        meter_inputs:
          items:
            $ref: '#/components/schemas/InputsPerMeterAndDatetime'
          type: array
          title: Meter Inputs
          description: All time-varying inputs that were fed into the MILP, per meter ID.
        meter_outputs:
          items:
            $ref: '#/components/schemas/OutputsPerMeterAndDatetime'
          type: array
          title: Meter Outputs
          description: Time-varying outputs calculated in the MILP, per meter ID.
        lem_transactions:
          items:
            $ref: '#/components/schemas/PoolLEMTransactions'
          type: array
          title: Lem Transactions
          description: List with total energies bought and sold in the LEM, per meter ID and per datetime.
        lem_prices:
          items:
            $ref: '#/components/schemas/LemPrice'
          type: array
          title: Lem Prices
          description: List with the local energy market prices computed for the requested horizon.
        self_consumption_tariffs:
          items:
            $ref: '#/components/schemas/PoolSelfConsumptionTariffsPerDatetime'
          type: array
          title: Self Consumption Tariffs
          description: List with the self-consumption tariffs considered by the MILP.
      type: object
      required:
        - order_id
        - objective_value
        - milp_status
        - total_rec_cost
        - individual_costs
        - meter_inputs
        - meter_outputs
        - lem_transactions
        - lem_prices
        - self_consumption_tariffs
      title: PoolMILPOutputs
    PoolSelfConsumptionTariffsPerDatetime:
      properties:
        datetime:
          type: string
          format: date-time
          title: Datetime
          description: Datetime in ISO 8601 format.
          examples:
            - '2024-05-16T00:45:00Z'
        self_consumption_tariff:
          type: number
          title: Self Consumption Tariff
          description: Tariff applicable to self-consumed energy from the public grid, published by the national regulatory entity for energy services, in â‚¬/kWh.
          examples:
            - 5
      type: object
      required:
        - datetime
        - self_consumption_tariff
      title: PoolSelfConsumptionTariffsPerDatetime
    PricingMechanism:
      type: string
      enum:
        - crossing_value
        - mmr
        - sdr
      title: PricingMechanism
    Storage:
      properties:
        meter_id:
          type: string
          title: Meter Id
          description: The string that unequivocally identifies the meter.
        e_bn:
          type: number
          minimum: 0
          title: E Bn
          description: Storage's energy capacity, in kWh.
        p_max:
          type: number
          minimum: 0
          title: P Max
          description: Storage's maximum power rate (for charge and discharge), in kW.
        soc_min:
          type: number
          maximum: 100
          minimum: 0
          title: Soc Min
          description: Minimum state-of-charge to consider for the storage asset, in %.
        soc_max:
          type: number
          maximum: 100
          minimum: 0
          title: Soc Max
          description: Maximum state-of-charge to consider for the storage asset, in %.
        eff_bc:
          type: number
          maximum: 100
          minimum: 0
          title: Eff Bc
          description: Charging efficiency of the storage asset, in %.
        eff_bd:
          type: number
          maximum: 100
          minimum: 0
          title: Eff Bd
          description: Discharging efficiency of the storage asset, in %.
        deg_cost:
          type: number
          minimum: 0
          title: Deg Cost
          description: Degradation cost of the storage asset, in %.
      type: object
      required:
        - meter_id
        - e_bn
        - p_max
        - soc_min
        - soc_max
        - eff_bc
        - eff_bd
        - deg_cost
      title: Storage
    TimeseriesDataNotFound:
      properties:
        message:
          type: string
          title: Message
          examples:
            - One or more data point for one or more meter IDs not found on registry system.
        missing_data_points:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
          title: Missing Data Points
          description: Lists of missing data points' datetime per meter ID.
          examples:
            - Meter#1:
                - '2024-05-16T00:00:00Z'
                - '2024-05-16T00:15:00Z'
        order_id:
          type: string
          maxLength: 45
          minLength: 45
          title: Order Id
          description: Order identifier for the request.
          examples:
            - iaMiULXA9BktPUu2b_PwTtycCSNe0_wYpPt9muwlEtgL49GDg-kggSktAjtu
      type: object
      required:
        - message
        - missing_data_points
        - order_id
      title: TimeseriesDataNotFound
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
    VanillaOutputs:
      properties:
        order_id:
          type: string
          maxLength: 60
          minLength: 60
          title: Order Id
          description: Order identifier for the request.
          examples:
            - iaMiULXA9BktPUu2b_PwTtycCSNe0_wYpPt9muwlEtgL49GDg-kggSktAjtu
        lem_prices:
          items:
            $ref: '#/components/schemas/LemPrice'
          type: array
          title: Lem Prices
          description: List with the local energy market prices computed for the requested horizon.
        offers:
          items:
            $ref: '#/components/schemas/Offer'
          type: array
          title: Offers
          description: A description of all the offers considered in the local energy market session that resulted in the calculated price.
      type: object
      required:
        - order_id
        - lem_prices
        - offers
      title: VanillaOutputs
    VanillaUserParams:
      properties:
        sdr_compensation:
          anyOf:
            - type: number
              maximum: 1
              minimum: 0
            - type: 'null'
          title: Sdr Compensation
          description: Only considered when choosing "sdr" as the pricing mechanism. <br />Defines a compensation between 0.0 and 1.0 allowing the user to set an incentive for internal trades whenever the REC has a net surplus.
          default: 0
        mmr_divisor:
          anyOf:
            - type: integer
              exclusiveMinimum: 0
            - type: 'null'
          title: Mmr Divisor
          description: Only considered when choosing "mmr" as the pricing mechanism. <br />Defines the divisor considered on the MMR expression. Values greater than 2 will favor buyers and values smaller than 2 will favor sellers.
          default: 2
        start_datetime:
          type: string
          format: date-time
          title: Start Datetime
          description: Start datetime for the price calculation horizon (included in it) in ISO 8601 format.
          examples:
            - '2024-05-16T00:00:00Z'
        end_datetime:
          type: string
          format: date-time
          title: End Datetime
          description: End datetime for the price calculation horizon (included in it) in ISO 8601 format.
          examples:
            - '2024-05-16T00:45:00Z'
        dataset_origin:
          $ref: '#/components/schemas/DatasetOrigin'
          description: |-
            Dataset origin from which the meter IDs' data is to be retrieved from. Two options are provided:
             - SEL (Smart Energy Lab)
             - INDATA
          examples:
            - SEL
        meter_ids:
          items:
            type: string
          type: array
          uniqueItems: true
          title: Meter Ids
          description: An array of strings that unequivocally identifies the meters to be included in the REC. <br />All registered assets (i.e., meter ids) belonging totally or partially to the meters listed, will be considered in the following computations.
          examples:
            - - Meter#1
              - Meter#2
        meter_installed_pv_capacities:
          anyOf:
            - items:
                $ref: '#/components/schemas/InstalledPVCapacity'
              type: array
            - type: 'null'
          title: Meter Installed Pv Capacities
          description: Defines, for the list of meters provided, what are the installed PV capacities to be considered.  <br />If this field or any specific structure regarding a meter ID defined in the "meter_ids" field is not provided, the original PV capacities of the missing meters will be considered.
          default: []
          examples:
            - - installed_pv_capacity: 5
                meter_id: Meter#1
        shared_meter_ids:
          anyOf:
            - items:
                type: string
              type: array
              uniqueItems: true
            - type: 'null'
          title: Shared Meter Ids
          description: An array of strings that unequivocally identifies the new shared meters to be included in the REC.
          default: []
          examples:
            - - SharedMeter#1
              - SharedMeter#2
        shared_meter_installed_pv_capacities:
          anyOf:
            - items:
                $ref: '#/components/schemas/InstalledPVCapacity'
              type: array
            - type: 'null'
          title: Shared Meter Installed Pv Capacities
          description: Defines, for the list of shared meters provided, what are the installed PV capacities to be considered.  <br />If this field or any specific structure regarding a shared meter ID defined in the "shared_meter_ids" field is not provided, no PV capacity will be considered for the missing meters.
          default: []
          examples:
            - - installed_pv_capacity: 5
                meter_id: SharedMeter#1
      type: object
      required:
        - start_datetime
        - end_datetime
        - dataset_origin
        - meter_ids
      title: VanillaUserParams